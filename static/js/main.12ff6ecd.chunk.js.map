{"version":3,"sources":["components/Navigation.jsx","components/Landing.jsx","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","toggle","document","querySelectorAll","nav","addEventListener","classList","contains","innerHTML","setTimeout","react_default","a","createElement","class","className","Component","Landing","src","style","color","bgParams","particles","number","value","density","enable","value_area","shape","type","stroke","width","polygon","nb_sides","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","resize","App","particles_default","height","params","components_Navigation","components_Landing","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAoDeA,2BAhDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GAFIP,mFAMjB,IAAIQ,EAASC,SAASC,iBAAiB,WAAW,GAC9CC,EAAMF,SAASC,iBAAiB,OAAO,GAI3CF,EAAOI,iBAAiB,QAAS,WAC7BD,EAAIE,UAAUL,OAAO,QAEnBG,EAAIE,UAAUC,SAAS,QACzBN,EAAOO,UANa,IAQpBP,EAAOO,UATY,KAWpB,GAEHC,WAAW,WACPL,EAAIE,UAAUL,OAAO,SACtB,sCAKH,OACES,EAAAC,EAAAC,cAAA,OAAKC,MAAM,kBACTH,EAAAC,EAAAC,cAAA,KAAGE,UAAU,WACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAAf,gBAEFJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,WACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAAf,WAEFJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,WACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAAf,WAEFJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,WACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAAf,aAEFJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,2BA3CIC,cCgDVC,oNA/CbhB,MAAQ,2EAEN,OACEU,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,UAAQK,IAAI,gDAEZP,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SACZJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACZJ,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,KAAGM,MAAO,CAAEC,MAAO,YAAnB,cAGFT,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACZJ,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,sBAGFF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACZJ,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,uBAGFF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACZJ,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,KAAGM,MAAO,CAAEC,MAAO,YAAnB,QAGFT,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACZJ,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,mBAGFF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACZJ,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,yBAGFF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACZJ,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,2BAxCUG,8BCIhBK,SAAW,CACfC,UAAW,CACTC,OAAQ,CACNC,MAAO,IACPC,QAAS,CACPC,QAAQ,EACRC,WAAY,MAGhBP,MAAO,CACLI,MAAO,WAETI,MAAO,CACLC,KAAM,OACNC,OAAQ,CACNC,MAAO,EACPX,MAAO,WAETY,QAAS,CACPC,SAAU,IAIdC,QAAS,CACPV,MAAO,GACPW,QAAQ,EACRC,KAAM,CACJV,QAAQ,EACRW,MAAO,EACPC,YAAa,GACbC,MAAM,IAGVC,KAAM,CACJhB,MAAO,IACPW,QAAQ,EACRC,KAAM,CACJV,QAAQ,EACRW,MAAO,GACPI,SAAU,GACVF,MAAM,IAGVG,YAAa,CACXhB,QAAQ,EACRiB,SAAU,IACVvB,MAAO,UACPc,QAAS,GACTH,MAAO,GAETa,KAAM,CACJlB,QAAQ,EACRW,MAAO,EACPQ,UAAW,OACXV,QAAQ,EACRW,UAAU,EACVC,SAAU,MACVC,QAAQ,EACRC,QAAS,CACPvB,QAAQ,EACRwB,QAAS,IACTC,QAAS,QAIfC,cAAe,CACbC,UAAW,SACXC,OAAQ,CACNC,QAAS,CACP7B,QAAQ,EACR8B,KAAM,WAERC,QAAS,CACP/B,QAAQ,EACR8B,KAAM,QAERE,QAAQ,MAwBCC,mLAdX,OACEhD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,CACEmB,MAAM,OACN8B,OAAO,OACPC,OAAQzC,IAEVV,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACmD,EAAD,cAVUhD,aC/EEiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASrE,SAASsE,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.12ff6ecd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./navigation.scss\";\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    var toggle = document.querySelectorAll(\".toggle\")[0];\n    var nav = document.querySelectorAll(\"nav\")[0];\n    var toggle_open_text = '';\n    var toggle_close_text = 'X';\n    \n    toggle.addEventListener('click', function() {\n        nav.classList.toggle('open');\n        \n      if (nav.classList.contains('open')) {\n        toggle.innerHTML = toggle_close_text;\n      } else {\n        toggle.innerHTML = toggle_open_text;\n      }\n    }, false);\n    \n    setTimeout(function(){\n        nav.classList.toggle('open');\t\n    }, 800);\n  }\n\n\n  render() {\n    return (\n      <nav class=\"top-right open\">\n        <a className=\"disc l1\">\n          <div className=\"nav-label\">and digital</div>\n        </a>\n        <a className=\"disc l2\">\n          <div className=\"nav-label\">github</div>\n        </a>\n        <a className=\"disc l3\">\n          <div className=\"nav-label\">resume</div>\n        </a>\n        <a className=\"disc l4\">\n          <div className=\"nav-label\">linkedin</div>\n        </a>\n        <a className=\"disc l5 toggle\" />\n      </nav>\n    );\n  }\n}\n\nexport default Navigation;\n","import React, { Component } from \"react\";\nimport \"./landing.scss\";\n\nclass Landing extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"landing-message\">\n        <script src=\"https://code.jquery.com/jquery-2.2.4.min.js\" />\n\n        <ul className=\"Words\">\n          <li className=\"Words-line\">\n            <p>&nbsp;</p>\n            <p style={{ color: \"#ff3244\" }}>Mark Shaw</p>\n          </li>\n\n          <li className=\"Words-line\">\n            <p>Mark Shaw</p>\n            <p>Software</p>\n          </li>\n\n          <li className=\"Words-line\">\n            <p>Software</p>\n            <p>Developer</p>\n          </li>\n\n          <li className=\"Words-line\">\n            <p>Developer</p>\n            <p style={{ color: \"#ff3244\" }}>AND</p>\n          </li>\n\n          <li className=\"Words-line\">\n            <p>AND</p>\n            <p>Chief</p>\n          </li>\n\n          <li className=\"Words-line\">\n            <p>Chief</p>\n            <p>Saxophonist</p>\n          </li>\n\n          <li className=\"Words-line\">\n            <p>Saxophonist</p>\n            <p>&nbsp;</p>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Landing;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navigation from \"./components/Navigation\";\nimport Landing from \"./components/Landing\";\nimport Particles from \"react-particles-js\";\nimport \"./components/particles.css\"\n\nconst bgParams = {\n  particles: {\n    number: {\n      value: 300,\n      density: {\n        enable: true,\n        value_area: 1000\n      }\n    },\n    color: {\n      value: \"#ffffff\"\n    },\n    shape: {\n      type: \"edge\",\n      stroke: {\n        width: 0,\n        color: \"#000000\"\n      },\n      polygon: {\n        nb_sides: 5\n      },\n\n    },\n    opacity: {\n      value: 0.5,\n      random: false,\n      anim: {\n        enable: false,\n        speed: 1,\n        opacity_min: 0.1,\n        sync: false\n      }\n    },\n    size: {\n      value: 100,\n      random: true,\n      anim: {\n        enable: false,\n        speed: 40,\n        size_min: 0.1,\n        sync: false\n      }\n    },\n    line_linked: {\n      enable: false,\n      distance: 150,\n      color: \"#ffffff\",\n      opacity: 0.4,\n      width: 1\n    },\n    move: {\n      enable: true,\n      speed: 6,\n      direction: \"none\",\n      random: false,\n      straight: false,\n      out_mode: \"out\",\n      bounce: false,\n      attract: {\n        enable: false,\n        rotateX: 600,\n        rotateY: 1200\n      }\n    }\n  },\n  interactivity: {\n    detect_on: \"canvas\",\n    events: {\n      onhover: {\n        enable: false,\n        mode: \"repulse\"\n      },\n      onclick: {\n        enable: false,\n        mode: \"push\"\n      },\n      resize: true\n    }\n  }\n}\n\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Particles\n          width=\"100%\"\n          height=\"100%\"\n          params={bgParams}\n        />\n        <Navigation />\n        <Landing />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}